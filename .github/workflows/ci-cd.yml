name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Build
        run: go build -v .

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run tests
        run: go test -v ./...

  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.56.2
      - name: Run golangci-lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout 5m

  deploy-to-staging:
    needs: [test, lint]
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - uses: actions/checkout@v4
      - name: Dummy Deploy to Staging
        run: echo “Deploy to staging with key ${{ secrets.STAGING_SECRET }}”

  deploy-to-qa:
    needs: [ test, lint ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: qa
    steps:
      - uses: actions/checkout@v4
      - name: Dummy Deploy to QA
        run: echo “Deploy to qa with key ${{ secrets.QA_SECRET }}”

  deploy-to-production:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      - name: Dummy Deploy to Production
        run: echo “Deploy to production with key ${{ secrets.PROD_SECRET }}”
